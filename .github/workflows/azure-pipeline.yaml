name: MLOps Azure animals classification pipeline

on:
  # push:
  #   branches: [ main ]
  workflow_call:
    inputs:
      create_compute:
        description: 'Create compute'
        required: false
        type: boolean
        default: true
      train_model:
        description: 'Train model'
        required: false
        type: boolean
        default: true
      skip_training_pipeline:
        description: 'Skip training pipeline'
        required: false
        type: boolean
        default: false
      deploy_model:
        description: 'deploy model'
        required: false
        type: boolean
        default: true
  workflow_dispatch:
    inputs:
      create_compute:
        description: 'Create compute'
        required: false
        type: boolean
        default: true
      train_model:
        description: 'Train model'
        required: false
        type: boolean
        default: true
      skip_training_pipeline:
        description: 'Skip training pipeline'
        required: false
        type: boolean
        default: false
      deploy_model:
        description: 'deploy model'
        required: false
        type: boolean
        default: true

env:
  GROUP: mlops-labo3-tibe
  WORKSPACE: mlops
  LOCATION: westeurope
  CREATE_COMPUTE: ${{ github.event.inputs.create_compute }}
  TRAIN_MODEL: ${{ github.event.inputs.train_model }}
  SKIP_TRAINING_PIPELINE: ${{ github.event.inputs.skip_training_pipeline }}
  DEPLOY_MODEL: ${{ github.event.inputs.deploy_model }}

jobs:
  azure-pipeline:
    if: ${{ inputs.skip_training_pipeline != 'false' }}
    # runs-on: ubuntu-latest
    runs-on: self-hosted
    outputs:
      ai-model-version: ${{ steps.azure-ml-pipeline.outputs.latest_version }}
    # runs-on: self-hosted
    steps:
      - name: 'Checkout out repository'
        uses: actions/checkout@v4

      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 'Create compute'
        uses: azure/CLI@v1
        id: azure-ml-compute
        if: ${{ inputs.create_compute }}
        with:
          azcliversion: 2.53.0
          inlineScript: |
            az extension add --name ml -y
            az configure --defaults group=$GROUP workspace=$WORKSPACE location=$LOCATION
            az ml compute create --file ./environment/compute.yaml
      
      - name: 'Start compute'
        uses: azure/CLI@v1
        id: azure-ml-compute-start
        if: ${{ steps.azure-ml-compute.outcome == 'success' || steps.azure-ml-compute.outcome == 'skipped' }}
        with:
          azcliversion: 2.53.0
          inlineScript: |
            az extension add --name ml -y
            az configure --defaults group=$GROUP workspace=$WORKSPACE location=$LOCATION
            az ml compute start --name mlopsc-cli
        continue-on-error: true

      - name: 'Run pipeline'
        uses: azure/CLI@v1
        id: azure-ml-pipeline
        if: ${{ inputs.train_model }}
        with:
          azcliversion: 2.53.0
          inlineScript: |
            az extension add --name ml -y
            az configure --defaults group=$GROUP workspace=$WORKSPACE location=$LOCATION
            az ml job create --file ./pipelines/animals-classification.yaml --set name=animals-classification-${{ github.sha }}-${{ github.run_id }} --stream
            echo "Pipeline Done"
            VERSION=$(az ml model list -n animals-classification --query '[0].version')
            echo "Latest version is $VERSION"
            echo "::set-output name=latest_version::$VERSION"

      - name: 'Cleanup Azure Stop compute'
        uses: azure/CLI@v1
        id: azure-ml-compute-stop
        if: always()
        with:
          azcliversion: 2.53.0
          inlineScript: |
            az extension add --name ml -y
            az configure --defaults group=$GROUP workspace=$WORKSPACE location=$LOCATION
            az ml compute stop -n mlopsc-cli
        continue-on-error: true

  
  download:
    runs-on: self-hosted
    # runs-on: ubuntu-latest
    # runs-on: ubuntu-latest
    needs: azure-pipeline
    # only run if azure-pipeline is succeeded or skipped
    if: ${{ needs.azure-pipeline.result == 'success' }} || ${{ needs.azure-pipeline.result == 'skipped' }}
    steps:
      - name: 'Checkout out repository'
        uses: actions/checkout@v4

      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: set model version
        uses: azure/CLI@v1
        with:
          azcliversion: 2.53.0
          inlineScript: |
            az extension add --name ml -y
            az configure --defaults group=$GROUP workspace=$WORKSPACE location=$LOCATION
            VERSION=$(az ml model list -n animals-classification --query '[0].version' -o tsv)
            echo "Latest version is $VERSION"
            echo "::set-output name=latest_version::$VERSION"
            az ml model download --name animals-classification --download-path ./inference --version $VERSION

      # - name: Download model
      #   uses: azure/CLI@v1
      #   with:
      #     azcliversion: 2.53.0
      #     inlineScript: |
      #       az extension add --name ml -y
      #       az configure --defaults group=$GROUP workspace=$WORKSPACE location=$LOCATION
            
      
      - name: Upload api code
        uses: actions/upload-artifact@v2
        with:
          name: docker-config
          path: inference

      # - name: Move model to docker
      #   run: |
      #       ls inference/animals-classification/INPUT_model_path
      #       mv inference/animals-classification/INPUT_model_path/animal-cnn inference 
      #       mv inference/animals-classification/INPUT_model_path/animal-cnn inference/animal-cnn

  deploy:
    needs: download
    runs-on: self-hosted
    # runs-on: ubuntu-latest
    # only run if download is succeeded or skipped AND if the deploy_model input is true
    if:  ${{ ( needs.download.result == 'success'  ||  needs.download.result == 'skipped'  ) &&  inputs.deploy_model  }} 
    steps:
      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Gather Docker Meta Information
        id: docker-metadata
        uses: docker/metadata-action@v3
        with:
          # list of Docker images to use as base name for tags
          images: |
            ghcr.io/demeulemeestertibe/mlops-2.0
          # generate Docker tags based on the following events/attributes:
          # The GitHub Branch
          # The GitHub SHA
          # More info: https://github.com/docker/build-push-action/blob/master/docs/advanced/tags-labels.md
          tags: |
            type=ref,event=branch
            type=sha
      
      # Enter your GITHUB Token here!
      - name: Login to GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: demeulemeestertibe
          password: ${{ secrets.GITHUB_TOKEN }}

      # download artifacts
      - name: Download API code for Docker
        uses: actions/download-artifact@v2
        with:
          name: docker-config
          path: inference

      - name: Docker Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./inference
          push: true
          tags: ${{ steps.docker-metadata.outputs.tags }}